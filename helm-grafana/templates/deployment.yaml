kind: PersistentVolume
apiVersion: v1
metadata:
  name: kube-system-influxdb-pv
  labels:
    kubernetes.io/cluster-service: "true"
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: 192.168.206.134
    path: /local/share/influxdb
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kube-system-influxdb-pvc
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: chart-grafana-pv
  labels:
    kubernetes.io/cluster-service: "true"
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: 192.168.206.134
    path: /local/share/grafana
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: monitoring-influxdb-v4
  namespace: kube-system
  labels: 
    k8s-app: influxGrafana
    version: v4
    kubernetes.io/cluster-service: "true"
spec: 
  replicas: 1
  selector: 
    matchLabels:
      k8s-app: influxGrafana
      version: v4
  template: 
    metadata: 
      labels: 
        k8s-app: influxGrafana
        version: v4
        kubernetes.io/cluster-service: "true"
    spec: 
      containers: 
        - image: gcr.io/google_containers/heapster_influxdb:v0.7
          name: influxdb
          resources:
            # keep request = limit to keep this container in guaranteed class
            limits:
              cpu: 100m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 500Mi
          env:
            - name: TZ
              value: America/Puerto_Rico  
          ports: 
            - containerPort: 8083
            - containerPort: 8086
          volumeMounts:
          - name: influxdb-persistent-storage
            mountPath: /data
      volumes:
         - name: influxdb-persistent-storage
           persistentVolumeClaim:
             claimName: kube-system-influxdb-pvc
      nodeSelector:
        servertype: administration #Custom node label 
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-influxdb
  namespace: kube-system
  labels: 
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "InfluxDB"
spec: 
  type: NodePort
  ports: 
    - name: http
      port: 8083
      targetPort: 8083
      nodePort: 30011
    - name: api
      port: 8086
      targetPort: 8086
      nodePort: 30012
  selector: 
    k8s-app: influxGrafana
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "grafana.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Values.server.name }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "grafana.server.fullname" . }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/dashboards-config: {{ include (print $.Template.BasePath "/dashboards-configmap.yaml") . | sha256sum }}
      {{- range $key, $value := .Values.server.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        app: {{ template "grafana.fullname" . }}
        component: "{{ .Values.server.name }}"
        release: "{{ .Release.Name }}"
    spec:
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
  {{- if .Values.server.tolerations }}
      tolerations:
{{ toYaml .Values.server.tolerations | indent 8 }}
  {{- end }}
      {{- if .Values.server.antiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          {{- $antiAffinityType := default "hard" .Values.server.antiAffinity.type | lower }}
          {{- if eq $antiAffinityType "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app: {{ template "grafana.server.fullname" . }}
          {{- end }}
          {{- if eq $antiAffinityType "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ template "grafana.server.fullname" . }}
          {{- end }}
      {{- end }}
      {{- if .Values.server.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.server.imagePullSecrets | indent 12 }}
      {{- end }}
      containers:
        - name: {{ template "grafana.name" . }}
          image: "{{ .Values.server.image }}"
          imagePullPolicy: {{ default "Always" .Values.server.imagePullPolicy }}
          env:
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: Admin
            {{- if .Values.server.installPlugins }}
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "grafana.server.fullname" . }}-config
                  key: grafana-install-plugins
            {{- end }}
            {{- if .Values.server.extraEnv }}
{{ toYaml .Values.server.extraEnv | indent 12 }}
            {{- end }}
          ports:
            - containerPort: 3000
          readinessProbe:
{{ toYaml .Values.server.readinessProbe | indent 12 }}
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
          securityContext:
            privileged: false
          volumeMounts:
            - name: config-volume
              mountPath: {{ default "/etc/grafana" .Values.server.configLocalPath | quote }}
            - name: dashboard-volume
              mountPath: {{ default "/local/share/grafana/dashboards" .Values.server.dashboardLocalPath | quote }}
            - name: storage-volume
              mountPath: {{ default "/local/share/grafana" .Values.server.storageLocalPath | quote }}
              subPath: "{{ .Values.server.persistentVolume.subPath }}"
      terminationGracePeriodSeconds: {{ default 300 .Values.server.terminationGracePeriodSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-config
        - name: dashboard-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-dashs
        - name: storage-volume
      {{- if .Values.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.server.persistentVolume.existingClaim }}{{ .Values.server.persistentVolume.existingClaim }}{{- else }}{{ template "grafana.server.fullname" . }}{{- end }}
      {{- else }}
          emptyDir: {}
      {{- end -}}
